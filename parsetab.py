
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ALERT AND AVERAGE COUNT EQ FIND FOR GEQ GT ID IF LEQ LT MAX MIN NEQ NUMBER OR SHOW STRING WHERE WITHcommand : find_command\n| show_command\n| alert_commandfind_command : FIND ID where_clauseshow_command : SHOW aggregate_function ID FOR ID WITH condition\n| SHOW aggregate_function ID FOR ID WITH ID EQ valuealert_command : ALERT IF conditionwhere_clause : WHERE conditioncondition : expression\n| expression AND condition\n| expression OR conditionexpression : ID comparison_op valuecomparison_op : GT\n| LT\n| EQ\n| GEQ\n| LEQ\n| NEQvalue : NUMBER\n| STRING\n| IDaggregate_function : AVERAGE\n| COUNT\n| MAX\n| MIN'
    
_lr_action_items = {'FIND':([0,],[5,]),'SHOW':([0,],[6,]),'ALERT':([0,],[7,]),'$end':([1,2,3,4,15,18,19,21,33,34,35,36,37,38,41,43,],[0,-1,-2,-3,-4,-7,-9,-8,-10,-11,-21,-12,-19,-20,-5,-6,]),'ID':([5,9,10,11,12,13,14,16,22,23,24,25,26,27,28,29,30,31,39,42,],[8,17,-22,-23,-24,-25,20,20,32,20,20,35,-13,-14,-15,-16,-17,-18,40,35,]),'AVERAGE':([6,],[10,]),'COUNT':([6,],[11,]),'MAX':([6,],[12,]),'MIN':([6,],[13,]),'IF':([7,],[14,]),'WHERE':([8,],[16,]),'FOR':([17,],[22,]),'AND':([19,35,36,37,38,],[23,-21,-12,-19,-20,]),'OR':([19,35,36,37,38,],[24,-21,-12,-19,-20,]),'GT':([20,40,],[26,26,]),'LT':([20,40,],[27,27,]),'EQ':([20,40,],[28,42,]),'GEQ':([20,40,],[29,29,]),'LEQ':([20,40,],[30,30,]),'NEQ':([20,40,],[31,31,]),'NUMBER':([25,26,27,28,29,30,31,42,],[37,-13,-14,-15,-16,-17,-18,37,]),'STRING':([25,26,27,28,29,30,31,42,],[38,-13,-14,-15,-16,-17,-18,38,]),'WITH':([32,],[39,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'command':([0,],[1,]),'find_command':([0,],[2,]),'show_command':([0,],[3,]),'alert_command':([0,],[4,]),'aggregate_function':([6,],[9,]),'where_clause':([8,],[15,]),'condition':([14,16,23,24,39,],[18,21,33,34,41,]),'expression':([14,16,23,24,39,],[19,19,19,19,19,]),'comparison_op':([20,40,],[25,25,]),'value':([25,42,],[36,43,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> command","S'",1,None,None,None),
  ('command -> find_command','command',1,'p_command','parser.py',16),
  ('command -> show_command','command',1,'p_command','parser.py',17),
  ('command -> alert_command','command',1,'p_command','parser.py',18),
  ('find_command -> FIND ID where_clause','find_command',3,'p_find_command','parser.py',22),
  ('show_command -> SHOW aggregate_function ID FOR ID WITH condition','show_command',7,'p_show_command','parser.py',26),
  ('show_command -> SHOW aggregate_function ID FOR ID WITH ID EQ value','show_command',9,'p_show_command','parser.py',27),
  ('alert_command -> ALERT IF condition','alert_command',3,'p_alert_command','parser.py',38),
  ('where_clause -> WHERE condition','where_clause',2,'p_where_clause','parser.py',42),
  ('condition -> expression','condition',1,'p_condition','parser.py',46),
  ('condition -> expression AND condition','condition',3,'p_condition','parser.py',47),
  ('condition -> expression OR condition','condition',3,'p_condition','parser.py',48),
  ('expression -> ID comparison_op value','expression',3,'p_expression','parser.py',55),
  ('comparison_op -> GT','comparison_op',1,'p_comparison_op','parser.py',59),
  ('comparison_op -> LT','comparison_op',1,'p_comparison_op','parser.py',60),
  ('comparison_op -> EQ','comparison_op',1,'p_comparison_op','parser.py',61),
  ('comparison_op -> GEQ','comparison_op',1,'p_comparison_op','parser.py',62),
  ('comparison_op -> LEQ','comparison_op',1,'p_comparison_op','parser.py',63),
  ('comparison_op -> NEQ','comparison_op',1,'p_comparison_op','parser.py',64),
  ('value -> NUMBER','value',1,'p_value','parser.py',68),
  ('value -> STRING','value',1,'p_value','parser.py',69),
  ('value -> ID','value',1,'p_value','parser.py',70),
  ('aggregate_function -> AVERAGE','aggregate_function',1,'p_aggregate_function','parser.py',74),
  ('aggregate_function -> COUNT','aggregate_function',1,'p_aggregate_function','parser.py',75),
  ('aggregate_function -> MAX','aggregate_function',1,'p_aggregate_function','parser.py',76),
  ('aggregate_function -> MIN','aggregate_function',1,'p_aggregate_function','parser.py',77),
]
